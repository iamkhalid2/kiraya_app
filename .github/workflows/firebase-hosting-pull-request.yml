# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting on PR
on: pull_request
permissions:
  checks: write
  contents: read
  pull-requests: write
jobs:
  build_and_preview:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.0'
          channel: 'stable'
      
      # Generate firebase_options.dart
      - name: Generate Firebase Options
        run: |
          mkdir -p lib
          cat > lib/firebase_options.dart << 'EOL'
          // File generated by FlutterFire CLI.
          // ignore_for_file: type=lint
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;

          /// Default [FirebaseOptions] for use with your Firebase apps.
          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                return web;
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for android - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.ios:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for ios - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.macOS:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for macos - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.windows:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for windows - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.linux:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for linux - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }
            
            static const FirebaseOptions web = FirebaseOptions(
              apiKey: '${{ secrets.FIREBASE_WEB_API_KEY }}',
              appId: '${{ secrets.FIREBASE_WEB_APP_ID }}',
              messagingSenderId: '${{ secrets.FIREBASE_WEB_MESSAGING_SENDER_ID }}',
              projectId: '${{ secrets.FIREBASE_WEB_PROJECT_ID }}',
              authDomain: '${{ secrets.FIREBASE_WEB_AUTH_DOMAIN }}',
              storageBucket: '${{ secrets.FIREBASE_WEB_STORAGE_BUCKET }}',
              measurementId: '${{ secrets.FIREBASE_WEB_MEASUREMENT_ID }}',
            );
          }
          EOL

      # Get dependencies
      - name: Get dependencies
        run: flutter pub get

      # Build web
      - name: Build web
        run: flutter build web --release
      
      # Deploy to Firebase
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KIRAYA_8948A }}
          projectId: kiraya-8948a
